#!/usr/bin/env bash
# Parallel data fetching for specific Pokémon

# Target Pokémon list
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create the output directory if it doesn't exist
if [ -d pokemon_data ]; then
    echo "Files will be saved to './pokemon_data'"
else
    mkdir pokemon_data
    echo "Created directory './pokemon_data' to store Pokémon data"
fi

# Function to fetch Pokémon data with error handling
fetch_pokemon_data() {
    name=$1
    api="https://pokeapi.co/api/v2/pokemon/$name"
    retries=0
    max_retries=3

    while [ $retries -lt $max_retries ]; do
        response=$(curl -s --fail "$api")
        if [ $? -eq 0 ] && [ -n "$response" ]; then
            echo "$response" > "./pokemon_data/$name.json"
            echo "✅ Successfully fetched data for $name"
            return
        else
            echo "⚠️ Request failed for $name. Retrying... ($((retries + 1)))"
            retries=$((retries + 1))
            sleep 2
        fi
    done

    echo "❌ Failed to fetch data for $name after 3 attempts" >> errors.txt
}

# Loop through Pokémon and fetch data in parallel
for name in "${pokemon_list[@]}"; do
    fetch_pokemon_data "$name" &  # Run in background
    sleep 0.5  # Slight stagger to avoid simultaneous hits (optional but safe)
done

# Wait for all background jobs to finish
wait

echo "✅ All data fetching completed."
